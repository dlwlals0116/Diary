# a = 'hello python'
#
# print(a.count('o')) #해당 문자의 개수를 구해준다
#
# print(a.find(l))  #이 문자의 시작 인덱스
#                   #없는 문자는 -1로 표시
#
# print(a.index('x'))#해당 문자의 시작 인덱스 번호를 반환
#                    #find 함수와는 별개로 index함수는 없는 값을 넣으면 오류를 반환한다
#
# print(','.join(a)) # index 번호 사이사이에 문자를 넣어준다
#
# print(a.replace('py', 'my')) #replace(old,new) old에 들어간 문자를 new 자리에 들어간 문자로 대체한다
#
# print(a.upper()) #대문자로
#
# print('ㅣ', a.lstrip('.'), 'ㅣ', sep="")  #a 문자열에서 왼쪽부터 연속되는 . 지우기
# print('ㅣ', a.rstrip('.'), 'ㅣ', sep="")  #a 문자열에서 오른쪽부터 연속되는 . 지우기
# print('ㅣ', a.strip('.'), 'ㅣ', sep="")  #a 문자열에서 양쪽부터 연속되는 . 지우기
#
# 리스트
#
# list_a = [1,2,3[4,5,[6,7],8],9,10]
# print(list_a[3],[2],[0])
# print(len(list_a))
#
# #3이라는 값을 7로 변경 == 수정
# list_b = [1,2,3,4]
# #list_a[2] = 7
# #4라는 값을 삭제
# #del list_a[3]
# # list_b = ['a','b','c','d']
#
# #리스트의 덧셈
# print(list_a + list_b)
# #리스트와 정수의 곱셈
# print(list_a *3)
#
# a = [4,1,2,3]
# a.append(5) #append = 해당 값을 리스트이 마지막 인덱스에 추가
# a.reverse() #reverse = 순서 반전
# print(list(reverse(a))) #복사본을 가지고 순서 반전 후 리스트를 반환
# a.insert(0,7)#insert(위치, 값) = 해당 위치에 원하는 값을 설정
# print(a.pop(0))   #괄호 안에 아무것도 넣기 않았을 때에는 가장 마지막 인덱스에 위치한 값이 추출된다. ()안에는 인덱스 번호가 들어간다
# print(a)
# print(a.count(3)) count(값) = 해당값이 리스트에 몇개 존재하는지를 반환
# a.sort(reverse= True)# sort() 순서정렬
# print(sorted(a,reverse= True))
# print(a)
# a.reverse(5)#remove(값) = 리스트에서 해당 값을 삭제
# b = [6,7,8,9]
# a.extend(b)#리스트의 확장()
# a.append(b)
#
# print(a)

#turple


#dictionary

# d = {'apple' : '사과', "banana": '바나나', 3: '삼'}
# print(d['apple'], d["banana"], d[3]) #key값을 이용해서  value값 뽑아내기
# print(d["orange"])#key값에 없는 값을 넣을 경우  keyerror가 발생한다.
# print(d["사과"])#[] 안에는 무조건  key 값만 와야한다 .value값을 인식하지 못한다
#
# # dictionary에서의 수정 삭제 추가
# #수정
# d['banana'] = ''
# #삭제
# del d['banana']
# #추가
# d['orange'] = '오렌지'  #딕셔너리의 없는 key값 = '추가될 key값의 value값'
#
# print(d.keys()) #딕셔너리의 key값들
# print(d.values())#딕셔너리의 value값들
# print(d.items())#딕셔너리의 item들
# #print(sd'in  d)
#
# #불, 불린 자료형들의 참과 거짓
# # 자료형의 참 거짓을 나타내는 함수(True, False)
# print(bool('python'), bool (''))
# print(bool([1,2,3]), bool([]))
# print(bool ((1,2)), bool(()))
# print(bool(3)), bool(0) #0을 제외한 모든 정수는 True
# print(bool(None))
#
# a = 1
# if a > 0:
#     print("hello")
#     if a > 0:
#         print(1)
#     else:
#         print("python")

#반복문
# While = 조건을 만족하는 동안 반복실행행
# while True = 조건이 항상 참 == 무한반복
#     if 조건:
#         break  #반복문을 탈출할 때 사용
#     if 조건:
#         continue  #밑의 실행문을 실행하지 않고 다음 반복으로 건너뜀
# 
# for  변수 in  연속된 자료형/range()
#     실행문
# for i in range(1,5):
#     print(i)

# #집합
# 0s1 = set([1])
# s2 = set([1,2])
# s3 = set([3,4])
# #합집합 구하기
# print(s1|s2, s2| s3)
# #차집합 구하기
# print(s1-s2, s2 - s3)
# #교집합 구하기
# print(s1 &s2, s2 & s3)
# a =

#함수
# f(x) = ax + b
# f(x) = 결과값
# x = 입력값
#1부터 10까지 출력을 10 번 반복해라
# def onetoten()
#     for i in range(1,11)
#
#
#
# # def 함수명(매개변수):
# #     실행문
# #     return 결과값
# def return_hi():
#     return "hi"
#
# #키워드 파라미터 (kwagrs)는 결과 값을 딕셔너리 형태로 나타내고 싶을 때 사용한다.
#
# def print_kwargs(**kwargs):
#     print(kwargs)
#
#매개 변수의 초기값을 설정해줄 수 있다.
# def say_myself(name, age,man=True):
#     print("나의 이름은 %s 입니다" % name)
#     print("나의 나이는 %s 입니다" % age)
#     if man:
#         print("남자입니다")
#     else:
#         print("여자입니다")
#
# say_myself("이지민",15)
#
#
# #함수의 결과값(반환값)의 개수는 무조건 1개이다.
# def sum_mul(a,b):
#     return a+b, a*b
# print(sum_mul(3,4))

# a = 1
# def vartest():
#     global a   #global a = 전역변수 a
#     a = 2   # 함수 내에서 사용된 변수 = 지역변수
#     return a
# vartest()
# print(a)

# def solution(s):
#     nums = {'zero':'0', 'one':'1', 'two':'2', 'three':'3', 'four':'4', 'five':'5', 'six':'6', 'seven':'7', 'eight':'8', 'nine':'9'}
#     for key,value in nums.items():
#         if key in s:
#             s = s.replace(key,value)
#     return int(s)
# s = "23four5six7"
# print(solution(s))

# def solution(a):
#     ans = ''
#     a = input()
#     a = a.lower()
#     while '..' in a:
#         ans = ans.replace("..", ".")
#     for i in a:
#         if i.isalnum():
#             ans += i
#         elif  i in ['-', '_', ',']:
#             ans += i
#         else:
#             pass
#
#     ans = ans.strip(".")
#     if ans == "":
#         ans = "a"
#     if len(ans) >= 16:
#         ans = ans[0:15]
#         if ans[14] == ".":
#             ans = ans[0:14]
#
#     while len(ans) < 3:
#         ans += ans[-1]
#     return ans

def solution(id_list, report ,k):
    ans = []
    report = list(set(report))

    report_user = {}
    for string in report:
        user, target = string.split()
        if target not in report_user.keys():
            report_user[target] = [user]
        else:
            report_user[target].append(user)
    print(report_user)
    result = [0] * len(id_list)
    print(result)
    for target in id_list:
        if target in report_user.keys() and len(report_user[target]) >= k :
            for user in report_user[target]:
                print(user)
                result[id_list.index(user)] +=1
    return result
id_list = ['muzi', 'frodo', 'apeach', "neo"]
report =  ["muzi frodo","apeach frodo","frodo neo","muzi neo","apeach muzi"]
k = 2

print(solution(id_list, report ,k))
# print("i'm learning Python")
# print('i\'m learning Python')
# a = "hello python"
# #문자열 인덱싱
# print(a[0]) #출력값 => "H"
# print(a[-1]) #출력값 => "d"
#
# #문자열 슬라이싱
# print(a[:]) #출력값 => "Hello world"
# print(a[2:5]) #출력값 => "llo"
# print(a[-5:]) #출력값 => "
#
#
# #문자열 더하기
# a = "hello"
# b = "World"
# print(a+b) #출력값 => "Hello World"
# print(a+' '+ b + '!') #출력값 => "Hello World!"
#
# #문자열 곱하기
# star = "*"
# print(star * 5) #출력값 => '*****'
#
# #문자열 길이 구하기
# a = "Python"
# print(len(a)) #출력값 => 6
#
# a = "Hello Ptyhon"
# print(a.count("o")) #출력값 => 2 해당문자의 개수 반환
# print(a.find('l')) #출력값 = 2 해당문자의 시작 인덱스 반환,
#                    #없는값을 찾을시 -1 반환
# print(a.index('x')) #출력값 => 2 해당문자의 시작인덱스 반환
#                     #없는각을 찾을 시 오류발생
# print(",".join(a)) #출력값 => H,e,l,l,o, ,P,y,t,h,o,n
#                    #해당 문자를 인덱스 사이사이에 추가한 값을 반환
#
# print(a.replace('Py','My')) #출력값=> old문자를 new문자로 바꿔줌
#
# print(a.split()) #출력값 => ['Hello',  'Python'] 해당 문자를 기준으로 문자열을 나누어서 반환
# print(a.upper()) #출력값 => HELLO PYTHON 문자열을 대문자로 변환
# print(a.lower()) #출력값 => hellp python 문자열을 소문자로 반환
#
# a = "....app.le...."
# #문자열에서 연속되는 해당 문자를 제거 후 반환
# a.lstrip() #출력값 =>"app.le...."
# a.strip() #출력값 =>"....apple...."
# a.rstrip() #출력값 =>"....app.le"

# a = input()
# for i in range(0, 8):
#     if "c=" in a:
#         a = a.replace("c=", ".")
#     elif "c-" in a:
#         a = a.replace("c-", ".")
#     elif "dz=" in a:
#         a = a.replace("dz=", ".")
#     elif "d-" in a:
#         a = a.replace("d-", ".")
#     elif "lj" in a:
#         a = a.replace("lj", ".")
#     elif "nj" in a:
#         a = a.replace("nj", ".")
#     elif "s=" in a:
#         a = a.replace("s=", ".")
#     elif "z=" in a:
#         a = a.replace("z=", ".")
# print(len(a))

# #list
# a = [4,1,3,2]
# b = [5,8,6]-
#
# #리스트의 수정
# a[3] = 7

a = int(input())
b = []
for i in range(a):
    x =int(input("k"))
    print(x)
    b.append(x)
r = sum(b)
t = r/a
f = 0
for i in range(a):
    if b[i] >t:
        f = f+1
f = int(f)
a = int(a)
h = str(f/a*100)+"%"
print(h)
# t1 = (1,)  #tuple 이 원소를 하나 가질 경우에는 , 을 넣어줘야 인식한다
# t2 = (1,2,3)
# l1 = [1,2,3]
# t3 = tuple(l1)
# t4 = 1,2,3
# print(type(t1), type(t2), type(t3), type(t4)) #출력값 => <class 'tuple
#
# #튜플들끼리의 덧셈
# print(t1+t2) #출력값 => (1,2,3,4,5,6)
# print(t2*2)  #출력값 => (4,5,6,4,5,6)
# print(t1[1]) #출력값 => 2
# print(t2[1:]) #출력값 => (5,6)
# print(len(t1)) #출력값 => 3
#
# #딕셔터리의 생성
# d1 = {"key":"value"}
# a = ["Hello"]
# b = ["python"]
# d2 = dict(zip(a,b))
# print(d2, type(d2))
#
# #딕셔너리의 key값을 이용해서 value만 뽑아내기
# print(d1["key"])
#
#
#
# d1 = {"apple":"사과", "banana":"바나나"}
# #추가
# d1["복숭아"] = "peach"
# #삭제
# del d1["banana"]
# #수정
# d1["apple"] = "수박"
# print(d1) #출력값 => {'apple' : '수박', '복숭아' : 'peach'}
#
# #key값을 중복한다면 마지막 key값에 value값이 사용된다
#
# #함수
# d1 = {"A" : 1, "B" : 2, "C" : 3}
# #key값들로 된 자료 만들기
# print(1 in d1.values())
# print(1 in d1.keys())
# print(1 in d1.items())
# for i in d1.keys():
#     print(i)
#     #출력값 => "A"
#     #         "B"
#     #         "C"
#     #key 값이 딕셔너리 안에 있는지 확인
# print("A"in d1) #출력값 => True
# s1 = set([1,2,3,4])
# s2 = set([3,4,5])
# s3 = set([6,7,8])
#
# #합집합 |
# print(s1 | s2) #출력값 => {1,2,3,4,5}
# print(s2 | s3) #출력값 => {3,4,5,6,7,8}
# #교집합 &
# print(s1&s2) #출력값 => {3,4}
# print(s2&s3) #출력값 => set()
#
# #차집합
# print(s1 -s2)
# print(s1 - s3)
#문제
# def solution(phone_book):
#     phone_book.sort()
#     print(phone_book)
#     for i in range(len(phone_book)-1):
#         if phone_book[i] == phone_book[i+1][:len(phone_book[i])]:
#             return False
#     return True
# phone_book = ["12", "123", "1235", "567", "88"]b
# print(solution(phone_book))

# for i in range(10,0,-1):
#     print(i)

# d1 = {'한국':'Korea', "미국":'America', "일본": 'japan'}
# print("japan" in d1.values())

L1 = ["AB", "BC", "DE"]
L2 = ["AD", "DE", "BD"]
#L1과 L2의 겹치는값은 무엇인가?
a = set(["AB", "BC", "DE"])
b = set(["AD", "DE", "BD"])
print(a&b)
