# a = 'hello python'
#
# print(a.count('o')) #해당 문자의 개수를 구해준다
#
# print(a.find(l))  #이 문자의 시작 인덱스
#                   #없는 문자는 -1로 표시
#
# print(a.index('x'))#해당 문자의 시작 인덱스 번호를 반환
#                    #find 함수와는 별개로 index함수는 없는 값을 넣으면 오류를 반환한다
#
# print(','.join(a)) # index 번호 사이사이에 문자를 넣어준다
#
# print(a.replace('py', 'my')) #replace(old,new) old에 들어간 문자를 new 자리에 들어간 문자로 대체한다
#
# print(a.upper()) #대문자로
#
# print('ㅣ', a.lstrip('.'), 'ㅣ', sep="")  #a 문자열에서 왼쪽부터 연속되는 . 지우기
# print('ㅣ', a.rstrip('.'), 'ㅣ', sep="")  #a 문자열에서 오른쪽부터 연속되는 . 지우기
# print('ㅣ', a.strip('.'), 'ㅣ', sep="")  #a 문자열에서 양쪽부터 연속되는 . 지우기
#
# 리스트
#
# list_a = [1,2,3[4,5,[6,7],8],9,10]
# print(list_a[3],[2],[0])
# print(len(list_a))
#
# #3이라는 값을 7로 변경 == 수정
# list_b = [1,2,3,4]
# #list_a[2] = 7
# #4라는 값을 삭제
# #del list_a[3]
# # list_b = ['a','b','c','d']
#
# #리스트의 덧셈
# print(list_a + list_b)
# #리스트와 정수의 곱셈
# print(list_a *3)
#
# a = [4,1,2,3]
# a.append(5) #append = 해당 값을 리스트이 마지막 인덱스에 추가
# a.reverse() #reverse = 순서 반전
# print(list(reverse(a))) #복사본을 가지고 순서 반전 후 리스트를 반환
# a.insert(0,7)#insert(위치, 값) = 해당 위치에 원하는 값을 설정
# print(a.pop(0))   #괄호 안에 아무것도 넣기 않았을 때에는 가장 마지막 인덱스에 위치한 값이 추출된다. ()안에는 인덱스 번호가 들어간다
# print(a)
# print(a.count(3)) count(값) = 해당값이 리스트에 몇개 존재하는지를 반환
# a.sort(reverse= True)# sort() 순서정렬
# print(sorted(a,reverse= True))
# print(a)
# a.reverse(5)#remove(값) = 리스트에서 해당 값을 삭제
# b = [6,7,8,9]
# a.extend(b)#리스트의 확장()
# a.append(b)
#
# print(a)

#turple


#dictionary

# d = {'apple' : '사과', "banana": '바나나', 3: '삼'}
# print(d['apple'], d["banana"], d[3]) #key값을 이용해서  value값 뽑아내기
# print(d["orange"])#key값에 없는 값을 넣을 경우  keyerror가 발생한다.
# print(d["사과"])#[] 안에는 무조건  key 값만 와야한다 .value값을 인식하지 못한다
#
# # dictionary에서의 수정 삭제 추가
# #수정
# d['banana'] = ''
# #삭제
# del d['banana']
# #추가
# d['orange'] = '오렌지'  #딕셔너리의 없는 key값 = '추가될 key값의 value값'
#
# print(d.keys()) #딕셔너리의 key값들
# print(d.values())#딕셔너리의 value값들
# print(d.items())#딕셔너리의 item들
# #print(sd'in  d)
#
# #불, 불린 자료형들의 참과 거짓
# # 자료형의 참 거짓을 나타내는 함수(True, False)
# print(bool('python'), bool (''))
# print(bool([1,2,3]), bool([]))
# print(bool ((1,2)), bool(()))
# print(bool(3)), bool(0) #0을 제외한 모든 정수는 True
# print(bool(None))
#
# a = 1
# if a > 0:
#     print("hello")
#     if a > 0:
#         print(1)
#     else:
#         print("python")

#반복문
# While = 조건을 만족하는 동안 반복실행행
# while True = 조건이 항상 참 == 무한반복
#     if 조건:
#         break  #반복문을 탈출할 때 사용
#     if 조건:
#         continue  #밑의 실행문을 실행하지 않고 다음 반복으로 건너뜀
# 
# for  변수 in  연속된 자료형/range()
#     실행문
# for i in range(1,5):
#     print(i)
