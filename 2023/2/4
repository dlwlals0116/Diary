#분수의 덧셈 120808
#def solution(numer1, denom1, numer2, denom2):
#     answer, fraction = [1], []
#     denom = denom2*denom1
#     numer = numer1*denom2 + numer2*denom1
#     fraction = [numer,denom]
#     if numer == denom:
#         return [1,1]
#     while True:
#         co = fraction.copy()
#         for i in range(2,max(fraction)):
#             if fraction[0]%i == 0 and fraction[1]%i == 0:
#                 fraction = [fraction[0]//i,fraction[1]//i]
#                 break
#         if co == fraction:
#             break
#     return fraction
# numer1 = 1
# denom1 = 2
# numer2 = 3
# denom2 = 4
# print(solution(numer1,denom1,numer2,denom2))
#옹알이(2)
# def solution(babbling):
#     cnt = 0
#     can = ["aya", "ye", "woo", "ma"]
#     for i in babbling:
#         for j in range(len(can)):
#             if can[j] in i:
#                 i = i.replace(can[j] , str(j))
#         if i.isdigit():
#             dupli = 0
#             print(i)
#             for x in range(1,len(i)):
#                 if i[x] == i[x - 1]:
#                     dupli = 1
#                 if len(i) == 1:
#                     dupli = 0
#             if dupli == 0:
#                 cnt += 1
#     return cnt
# babbling = ["ayayeaya", "yee", "u", "maa"]
# print(solution(babbling))
# #유한소수판별하기 120878
# def solution(a, b):
#     fraction = [a,b]
#     while True:
#         co = fraction.copy()
#         for i in range(2,max(fraction)):
#             if fraction[0]%i == 0 and fraction[1]%i == 0:
#                 fraction = [fraction[0]//i,fraction[1]//i]
#                 break
#         if co == fraction:
#             break
#     if fraction[0] == fraction[1]:
#         return 1
#     while fraction[1] % 2 == 0:
#         fraction[1] = fraction[1] // 2
#     while fraction[1] % 5 == 0:
#         fraction[1] = fraction[1] // 5
#     if fraction[1] == 1:
#         return 1
#     else:
#         if fraction[1] == fraction[0]:
#             return 1
#         else:
#             return 2
# a = 7
# b = 20
# print(solution(a,b))
