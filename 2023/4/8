# #공원산책
# def solution(park, routes):
#     for i in range(len(park)):              #시작지점찾기
#         for j in range(len(park[i])):
#             if park[i][j] == "S":
#                 sero,garo = i,j
#                 break
#
#     for i in routes:
#         direction,length = i.split()
#         length,true = int(length),False
#
#         try:
#             if direction == "E":            #방향 E부분
#                 for j in range(1,length+1):
#                     if park[sero][garo + j] == "X":true = True
#                 if true:continue
#                 garo += length
#
#             elif direction == "S":          #방향 S부분
#                 for j in range(1,length+1):
#                     if park[sero+j][garo] == "X":true = True
#                 if true:continue
#                 sero += length
#
#             elif direction == "N":          #방향 N부분
#                 for j in range(length+1):
#                     if sero-j < 0:raise
#                     if park[sero-j][garo] == "X":true = True
#                 if true:continue
#                 sero -= length
#
#             elif direction == "W":          #방향 W부분
#                 for j in range(length+1):
#                     if garo-j < 0:raise
#                     if park[sero][garo - j] == "X":true = True
#                 if true:continue
#                 garo -= length
#
#         except IndexError:continue
#
#     return [sero,garo]
# park = ["OSO","OOO","OXO","OOO"]
# routes = ["E 2","S 3","W 1"]
# print(solution(park,routes))

# #k번째 수
# def solution(array, commands):
#     answer = []
#     for i in commands:
#         I,J,k = i
#         basket = list(array[I-1:J])
#         basket.sort()
#         answer.append(basket[k-1])
#     return answer
# array = [1, 5, 2, 6, 3, 7, 4]
# commands = [[2, 5, 3], [4, 4, 1], [1, 7, 3]]
# print(solution(array,commands))

# #달리기경주
# def solution(players, callings):
#     Dict = dict()
#     for i in callings:
#         for j in range(len(players)):
#             Dict[players[j]] = j+1
#         O_list = players
#         Dict[i] =
#     return players
# player = ["mumu", "soe", "poe", "kai", "mine"]
# callings = ["kai", "kai", "mine", "mine"]
# print(solution(player, callings))
#추억점수합산
# def solution(name, yearning, photo):
#     answer,retrospect = [], dict()
#     for i in range(len(name)):
#         retrospect[name[i]] = yearning[i]
#     for i in photo:
#         num = 0
#         for j in range(len(i)):
#             try:
#                 num += retrospect[i[j]]
#             except KeyError:
#                 continue
#         answer.append(num)
#     return answer
# name = ["may", "kein", "kain", "radi"]
# yearning = [5, 10, 1, 3]
# photo = [["may", "kein", "kain", "radi"],
#          ["may", "kein", "brin", "deny"],
#          ["kon", "kain", "may", "coni"]]
# print(solution(name,yearning,photo))

# #위장
# def solution(clothes):
#     clothes_list = dict()
#     answer = 1
#     gear_list = []
#     for i in clothes:
#         if i[-1] not in clothes_list: clothes_list[i[-1]] = len(i)-1
#         else: clothes_list[i[-1]] += 1
#         if i[-1] not in gear_list: gear_list.append(i[-1])
#     print(f"clothes = {clothes_list}, gears = {gear_list}")
#     for i in list(clothes_list.values()):
#         answer *= i+1
#     return answer -1
# clothes = [["yellow_hat", "headgear"], ["blue_sunglasses", "eyewear"], ["green_turban", "headgear"]]
# print(solution(clothes))

#위장 마지막 공식 설명
#2개일때 (a+b) + ab
#3개일때 (a+b+c) + (ab+bc+ca) + (abc)

#(x+a)(x+b)(x+c) =  x3 + (a+b+c)x2 + (ab+bc+ca)x + (abc)
#근데 여기서! x = 1 이면 위에 3개일때 식 + 1 이 나오게 된다
#따라서 x에 1을 대입해서 (1+a)(1+b)(1+c) -1 = (3개일때 공식)
#이고 4개 5개로 gear의 종류가 늘어나도 딕셔너리로 정리한 key값의 value값을 a,b,c,d,e,f,g.....에 넣어주면 되니
#     for i in list(clothes_list.values()):
#         answer *= i+1
#이런식의 for문을 이용하여 
#마지막 return할때 answer-1을 해주었다
