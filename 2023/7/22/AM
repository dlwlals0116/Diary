class Node:
    def __init__(self,data,link = None):
        self.data = data
        self.link = link
class Mylist:
    def __init__(self,*datas):
        self.length = 0
        self.head = None
        self.tail = None
        for data in datas:
            self.append(data)
    #노드를 생성하여 데이터를 연결
    def append(self,data):
        node = Node(data)

        #데이터가 없는경우
        if self.head is None:
            self.head = node
            self.tail = node
        else:
            self.tail.link = node
            self.tail = node
        self.length += 1
    #출력할때 이쁘게 출려가기 str재정의
    def __str__(self):
        result = "<"
        curr = self.head
        while curr is not None:
            result += str(curr.data)
            if curr.link is not None:
                result += ", "
            curr = curr.link
        result += ">"
        return result
    def __len__(self):
        return self.length
    def __iter__(self):
        def generate():
            curr = self.head
            while curr is not None:
                yield curr.data
                curr = curr.link
        return generate()
    def __getitem__(self, item):
        #내가한거
        # cnt = 0
        # curr = self.head
        # while curr is not None:
        #     cnt += 1
        #     curr = curr.link
        #     if cnt == item:
        #         return curr.data
        if type(item) != int:
            raise TypeError('인덱스는 정수값이여야합니다')
        if item < 0:
            item = len(self) + item
        if item >= len(self) or item < 0:
            raise IndexError('인덱스가 범위를 초과했습니다')
        for idx, data in enumerate(self):
            if idx == item: return data
    def __setitem__(self, key, value):
        if type(key) != int:
            raise TypeError('인덱스는 정수값이여야합니다')
        if key < 0:
            key = len(self) + key
        if key >= len(self) or key < 0:
            raise IndexError('인덱스가 범위를 초과했습니다')
        cnt, curr = 0, self.head
        while curr is not None:
            if cnt == key:
                curr.data = value
            cnt += 1
            curr = curr.link
    def pop(self,index = -1):
        if type(index) != int:
            raise TypeError('인덱스는 정수값이여야합니다')
        if index < 0:
            index = len(self) + index
        if index >= len(self) or index < 0:
            raise IndexError('인덱스가 범위를 초과했습니다')
        curr,cnt=  self.head,0
        if index == 0:
            self.head = curr.link
            self.length -= 1
            return curr.data
        elif index == len(self)-1:
            result = self.tail.data
            while curr is not None:
                if cnt == index-1:
                    self.tail = curr
                    curr.link = None
                curr = curr.link
                cnt += 1
            self.length -= 1
            return result
        elif len(self) == 1:
            result = self[0]
            self.tail = None
            self.head = None
            self.length -= 1
            return result
        else:
            result = 0
            while curr is not None:
                if cnt == index-1:
                    result = curr.link.data
                    curr.link = curr.link.link
                curr = curr.link
                cnt +=1
            self.length -= 1
            return result
    def reverse(self):
        pass
# my_list = Mylist(1,2,3)
# print(my_list)
# for i in my_list:
#     print(i)
# mylist = Mylist(1,2,3,4)
# print(mylist[2])
# print(mylist[-3])
# mylist[-1] = 4
# print(mylist)
# print(mylist.pop(2))
# print(mylist)
